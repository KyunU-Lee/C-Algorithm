노션에 따로정리

2023-08-03 

연결 리스트, 스택, 큐, set, hash table, tree, heap, 우선 순위 큐, 그래프

자료구조를 이용하는 이유는 3가지이다. 

### 효율성

자료 구조는 좀 더 효율적인 알고리즘이 될 수 있도록 자료를 구조화시킨다. 

### 추상화

자료구조는 자료를 좀 더 쉽게 이해할 수 있는 방법을 제공한다. 

### 재사용성

자료 구조는 모듈화되어 있고 문맥에 자유롭기 때문에 재사용이 가능하다. 

자료 구조에 대해 생각할 때 그 자료구조에 대한 행위 즉 연산도 함께 생각해야 한다. 

# 일반적인 알고리즘 설계 방법

넓게 보면 많은 알고리즘들이 같은 방법으로 문제에 접근한다.

## 무작위 알고리즘

무작위 알고리즘은 난수의 통계적 특성을 이용한다. ex) 퀵 정렬

## 분할 정복 알고리즘

분할 정복 알고리즘은 분할, 정복, 결합의 과정을 거친다. 

분할 : 자료들을 좀 더 다루기 쉬운 조각들로 작게 나눈다 
정복 : 나뉘어진 부분들에 대해 연산을 소행한다. 
결합 : 연산처리된 부분들을 재결합한다.

ex 합병 정렬

## 동적 프로그래밍

동적 프로그래밍은 큰 문제를 하위 문제들로 나누고 나중에 재결합한다. 

사용안함

## 욕심쟁이 알고리즘(그리드)

매 순간 가장 좋아 보이는 것을 선택한다.

ex) 허프만 코딩

## 근사 알고리즘

최적의 해를 구하는 대신 “충분히 좋은” 해를 구한다. 

# 포인터의 기초

포인터는 자로 자체를 저장하지 않고 단순히 자료의 메모리 상의 주소를 저장하는 변수이다. 

### 구조체

```cpp
typedef struct ListElmt_ {

	void *data;
	struct ListElmt_ *next;
} ListElmt;
```

구조체는 자신의 인스턴스를 가질 수 없지만 자신의 인스턴스의 포인터는 가질 수 있다.

### 포인터

a[i] = *(a + i )

```cpp
int value = 10;

int* a = &value;
일때 
*a = value;
&a = value의 주소값
a = a의 주소값
```

# 재귀

코드영역 : 프로그램이 실행될 때 수행되는 기계어
정적 자료 영역 : static 이나 전역변수가 들어간다
힙(heap) : malloc 함수를 통해 할당되는 메모리처럼 동적으로 할당되는 메모리 공간
stack : 함수 호출 관련 정보가 들어감

# 알고리즘 분석

### 최악 분석

### O-표기법

### 계산 복잡도